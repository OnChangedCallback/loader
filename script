-- // variables
local getService = game.GetService
local marketplaceService = getService(game, "MarketplaceService")
local teleportService = getService(game, "TeleportService")
local httpService = getService(game, "HttpService")
local players = getService(game, "Players")
local localPlayer = players.LocalPlayer
local osDate, mathRandom = os.date, math.random
local udim2New, color3FromRGB = UDim2.new, Color3.fromRGB

-- // library initialization
do
	local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/OnChangedCallback/loader/refs/heads/main/Library"))()
	local Window = Library:Window({
	    Name = "R4ze.pub rewrite",
	    Size = udim2New(0, 700, 0, 600),
	    FadeSpeed = 0.25
	})

	local Watermark = Library:Watermark("R4ze.pub rewrite | ".. osDate("%b %d %Y") .. " | ".. marketplaceService:GetProductInfo(game.PlaceId).Name)
	local KeybindList = Library:KeybindList()

	Watermark:SetVisibility(false)
	KeybindList:SetVisibility(false)
    local VisualsTab = Window:Page({Name = "Visuals", Columns = 2, Subtabs = false})
    local SettingsTab = Window:Page({Name = "Settings", Columns = 3, Subtabs = false})

	
	-- // visuals tab funcs and ui
	do
		-- ESP мультисекция с вкладками Box, Health, Armor, Flags
		local BoxSection, HealthSection, ArmorSection, FlagsSection = VisualsTab:MultiSection({
			Sections = {"Box", "Health", "Armor", "Flags"},
			Side = 1
		})
		
		-- Box вкладка
		do
			-- UI элементы будут добавлены позже
		end
		
		-- Health вкладка
		do
			-- UI элементы будут добавлены позже
		end
		
		-- Armor вкладка
		do
			-- UI элементы будут добавлены позже
		end
		
		-- Flags вкладка
		do
			-- UI элементы будут добавлены позже
		end
	end
	
	-- // settings tab funcs and ui
	do
		local SettingsSection = SettingsTab:Section({Name = "Settings", Side = 2})
		local ConfigsSection = SettingsTab:Section({Name = "Profiles", Side = 1})
		local GameSection = SettingsTab:Section({Name = "Game", Side = 3})
		
		-- Создаем colorpicker'ы для темы
		for Index, Value in Library.Theme do 
			SettingsSection:Label({Name = Index, Alignment = "Left"}):Colorpicker({ 
				Name = Index, 
				Default = Value, 
				Flag = "Theme"..Index
			})
		end

		SettingsSection:Label({Name = "Menu Keybind", Alignment = "Left"}):Keybind({Name = "Menu Keybind", Flag = "Menu Keybind", Default = Enum.KeyCode.RightControl, Mode = "Toggle", Callback = function(Value)
			Library.MenuKeybind = Library.Flags["Menu Keybind"].Key
		end})

		SettingsSection:Toggle({Name = "Watermark", Flag = "Watermark", Default = false, Callback = function(Value)
			Watermark:SetVisibility(Value)
		end})

		SettingsSection:Toggle({Name = "Keybind List", Flag = "Keybind List", Default = false, Callback = function(Value)
			KeybindList:SetVisibility(Value)
		end})

		SettingsSection:Dropdown({Name = "Tweening Style", Flag = "Tweening Style", Default = "Exponential", Items = {"Linear", "Sine", "Quad", "Cubic", "Quart", "Quint", "Exponential", "Circular", "Back", "Elastic", "Bounce"}, Callback = function(Value)
			Library.Tween.Style = Enum.EasingStyle[Value]
		end})

		SettingsSection:Dropdown({Name = "Tweening Direction", Flag = "Tweening Direction", Default = "Out", Items = {"In", "Out", "InOut"}, Callback = function(Value)
			Library.Tween.Direction = Enum.EasingDirection[Value]
		end})

		SettingsSection:Slider({Name = "Tweening Time", Min = 0, Max = 5, Default = 0.25, Decimals = 0.01, Flag = "Tweening Time", Callback = function(Value)
			Library.Tween.Time = Value
		end})

		SettingsSection:Button({Name = "Notification test", Callback = function()
			Library:Notification("This is a notification This is a notification This is a notification This is a notification", 5, color3FromRGB(mathRandom(0, 255), mathRandom(0, 255), mathRandom(0, 255)))
		end})

		SettingsSection:Button({Name = "Unload library", Callback = function()
			Library:Unload()
		end})

		local ConfigName 
		local ConfigSelected

		local ConfigsListbox = ConfigsSection:Listbox({Items = { }, Name = "Configs", Flag = "Configs List", Callback = function(Value)
			ConfigSelected = Value
		end})

		ConfigsSection:Textbox({Name = "Config Name", Placeholder = ". .", Flag = "Config Name", Callback = function(Value)
			ConfigName = Value
		end})

		ConfigsSection:Button({Name = "Create Config", Callback = function()
			if not isfile(Library.Folders.Configs .. "/" .. ConfigName .. ".json") then
				writefile(Library.Folders.Configs .. "/" .. ConfigName .. ".json", Library:GetConfig())

				Library:RefreshConfigsList(ConfigsListbox)
			else
				Library:Notification("Config '" .. ConfigName .. ".json' already exists", 3, color3FromRGB(255, 0, 0))
				return
			end
		end})

		ConfigsSection:Button({Name = "Load Config", Callback = function()
			if ConfigSelected then
				Library:LoadConfig(readfile(Library.Folders.Configs .. "/" .. ConfigSelected))
				for Index in Library.Theme do 
					local color = Library.Flags["Theme"..Index].Color
					Library.Theme[Index] = color
					Library:ChangeTheme(Index, color)
				end
			end
		end})

		ConfigsSection:Button({Name = "Delete Config", Callback = function()
			if ConfigSelected then
				Library:DeleteConfig(ConfigSelected)
				Library:RefreshConfigsList(ConfigsListbox)
			end
		end})

		ConfigsSection:Button({Name = "Save Config", Callback = function()
			if ConfigSelected then Library:SaveConfig(ConfigSelected) end
		end})

		ConfigsSection:Button({Name = "Refresh Configs", Callback = function()
			Library:RefreshConfigsList(ConfigsListbox)
		end})

		Library:RefreshConfigsList(ConfigsListbox)
		
		-- Game Section
		do
			GameSection:Button({Name = "Copy JobId", Callback = function() 
				setclipboard(game.JobId)
				Library:Notification("JobId copied to clipboard", 2, color3FromRGB(0, 255, 0))
			end})
			GameSection:Button({Name = "Copy GameID", Callback = function() 
				setclipboard(game.GameId)
				Library:Notification("GameID copied to clipboard", 2, color3FromRGB(0, 255, 0))
			end})
			GameSection:Button({Name = "Copy Join Script", Callback = function()
				setclipboard('game:GetService("TeleportService"):TeleportToPlaceInstance(' .. game.PlaceId .. ', "' .. game.JobId .. '", game.Players.LocalPlayer)')
				Library:Notification("Join script copied to clipboard", 2, color3FromRGB(0, 255, 0))
			end})
			GameSection:Button({Name = "Rejoin", Callback = function()
				Library:Notification("Rejoining server...", 2, color3FromRGB(255, 255, 0))
				teleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, localPlayer)
			end})
			GameSection:Button({Name = "Join New Server", Callback = function()
				local serverData = httpService:JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
				local randomServer = serverData.data[mathRandom(1, #serverData.data)]
				if randomServer.playing <= Library.Flags["max_players"] then
					Library:Notification("Joining new server...", 2, color3FromRGB(255, 255, 0))
					teleportService:TeleportToPlaceInstance(game.PlaceId, randomServer.id)
				else
					Library:Notification("No suitable server found", 3, color3FromRGB(255, 0, 0))
				end
			end})
			GameSection:Slider({Name = "Max Players", Flag = "max_players", Min = 0, Max = 40, Default = 15, Decimals = 1})
		end
	end
end
